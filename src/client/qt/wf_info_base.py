# This file has been autogenerated by the pywayland scanner

# The MIT License (MIT)
#
# Copyright (c) 2022 Scott Moreau
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from __future__ import annotations

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)


class WfInfoBase(Interface):
    """Wayfire desktop communication

    Interface that allows clients to get information from wayfire.
    """

    name = "wf_info_base"
    version = 1


class WfInfoBaseProxy(Proxy[WfInfoBase]):
    interface = WfInfoBase

    @WfInfoBase.request()
    def view_info(self) -> None:
        """Get information about the selected view

        Get information about the selected view.
        """
        self._marshal(0)

    @WfInfoBase.request(
        Argument(ArgumentType.Int),
    )
    def view_info_id(self, view_id: int) -> None:
        """Get information about the view from id

        Get information about the view from id.

        :param view_id:
            view ID
        :type view_id:
            `ArgumentType.Int`
        """
        self._marshal(1, view_id)

    @WfInfoBase.request()
    def view_info_list(self) -> None:
        """Get information from all views

        Get information about all views.
        """
        self._marshal(2)


class WfInfoBaseResource(Resource):
    interface = WfInfoBase

    @WfInfoBase.event(
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.String),
        Argument(ArgumentType.String),
        Argument(ArgumentType.String),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.String),
        Argument(ArgumentType.Uint),
    )
    def view_info(self, view_id: int, client_pid: int, workspace_x: int, workspace_y: int, app_id: str, title: str, role: str, x: int, y: int, width: int, height: int, is_xwayland: int, focused: int, output: str, output_id: int) -> None:
        """Export information about a view to a client

        Provide client with information about a view.

        :param view_id:
            view wayfire ID
        :type view_id:
            `ArgumentType.Int`
        :param client_pid:
            client PID
        :type client_pid:
            `ArgumentType.Int`
        :param workspace_x:
            view workspace x
        :type workspace_x:
            `ArgumentType.Int`
        :param workspace_y:
            view workspace y
        :type workspace_y:
            `ArgumentType.Int`
        :param app_id:
            view application ID
        :type app_id:
            `ArgumentType.String`
        :param title:
            view title
        :type title:
            `ArgumentType.String`
        :param role:
            view role
        :type role:
            `ArgumentType.String`
        :param x:
            view x position
        :type x:
            `ArgumentType.Int`
        :param y:
            view y position
        :type y:
            `ArgumentType.Int`
        :param width:
            view width
        :type width:
            `ArgumentType.Int`
        :param height:
            view height
        :type height:
            `ArgumentType.Int`
        :param is_xwayland:
            whether view is xwayland
        :type is_xwayland:
            `ArgumentType.Int`
        :param focused:
            whether view is focused
        :type focused:
            `ArgumentType.Int`
        :param output:
            Name of the view's output
        :type output:
            `ArgumentType.String`
        :param output_id:
            ID of the view's output
        :type output_id:
            `ArgumentType.Uint`
        """
        self._post_event(0, view_id, client_pid, workspace_x, workspace_y, app_id, title, role, x, y, width, height, is_xwayland, focused, output, output_id)

    @WfInfoBase.event()
    def done(self) -> None:
        """Notify client that the complete list of views has been sent

        Notify client that the complete list of views has been sent.
        """
        self._post_event(1)


class WfInfoBaseGlobal(Global):
    interface = WfInfoBase


WfInfoBase._gen_c()
WfInfoBase.proxy_class = WfInfoBaseProxy
WfInfoBase.resource_class = WfInfoBaseResource
WfInfoBase.global_class = WfInfoBaseGlobal
